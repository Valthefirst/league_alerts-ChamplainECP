@startuml "League Alerts System - C4 Level 3 Diagram"

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
left to right direction

LAYOUT_WITH_LEGEND()

title "League Alerts System - Component Diagram (C4 Level 3)"

Container(web_app, "Single Page Application", "React, TypeScript", "Single Page Application that provides League Alerts functionality to users")

Container_Boundary(api, "API Application") {

    Container(Cloudinary, "CloudinaryService", "Cloudinary", "Manages image and media storage")

    /'
        ##############     Auth Subdmain
    '/

    Container_Boundary(auth_container, "Auth Container") {
        Component(auth_controller, "Authentication Controller", "Auth0", "Handles user redirect, login and logout. Initial step")
        Component(jwt_filter, "JWT Filter", "Auth0", "Filters all incoming JWT tokens. Making sure these tokens are valid")
        Component(security_config, "Security Config", "Spring Security", "Defines endpoint access rules and role-specific permissions")
        Component(auth_service, "Auth Service", "TypeScript", "Manages user logins and create account authentication processes in frontend")
        Component(auth_service_back, "User Service", "Spring boot", "Manages user logins and create account and authentication processes in backend")
        Component(reset_passwrd,"Reset Password Controller", "If signed in without facebook-google, we need to handle resetpassword with auth0")   
        Component(account_suspend, "Suspend Articles","If reader is violent in comments suspend account")   
    }

    /'
        ##############     Article Subdmain
    '/

    Container_Boundary(article_container, "Article Container") {
        Component(article_controller, "Article Controller", "Spring Java", "Handles user endpoints and CRUD operations")
        Component(article_service, "Article Service", "Spring Java", "Handles user redirect and login. Initial step")
        Component(article_repository, "Article Repository", "Spring Java", "Handles user redirect and login. Initial step")
        Component(article_search, "Search Article", "Spring Java", "Search articles by Id, get specific content")
        Component(article_save_later, "Article Save for Later", "Spring Java", "Author saved article to write later.")
        Component(article_related, "Article with Tags", "Spring Java", "Articles sorted by tags")
        Component(article_trending, "Article Trending", "TypeScript", "Articles with most viewed")

        Component(tag_repository, "Tag Repository", "Spring Java", "Handles Queries for tags")
        Component(tag_service, "Tag Service", "Spring Java", "Handle business logic for adding and fetching tags")
        Component(tag_controller, "Tag Controller", "Spring Java", "Handles request and responses front the frontend")




    }

    /'
        ##############     Reader/Author Subdmain
    '/

    Container_Boundary(reader_container, "Reader Container") {
        Component(reader_controller, "Reader Controller", "Spring Java", "Handles user redirect and login. Initial step")
        Component(reader_repository, "Reader Repository", "Spring Java", "Handles user redirect and login. Initial step")
        Component(reader_service, "Reader Service", "Spring Java", "Handles user redirect and login. Initial step")
    }

    Container_Boundary(author_container, "Author Container") {
        Component(author_controller, "Author Controller", "Spring Java", "Handles user redirect and login. Initial step.")
        Component(author_repository, "Author Repository", "Spring Java", "Handles user redirect and login. Initial step.")
        Component(author_service, "Author Service", "Spring Java", "Handles user redirect and login. Initial step.")
        Component(author_profile, "Author Profile", "Spring Java", "Language, short bio for each author.")
    }

    /'
        ##############     Interaction Subdomain
    '/

    Container_Boundary(interaction_container, "Interaction Container") {
        Component(comment_controller, "Comment Controller", "Spring Java", "Handles user redirect and login. Initial step")
        Component(comment_service,"Comment Service", "Spring Java", "Handles comments CRUD operations, as of now only post")
        Component(comment_repository, "Comment Repository","Spring Java", "Get specific comment")
        Component(comment_counter, "Comment Counter", "Spring Java", "Count the number of comments a GETID article has")
        Component(comment_moderation, "Comment Moderation", "Spring Java", "Check all comments per user for moderation")

        Component(like_controller, "Like Controller", "Spring Java", "Handles user redirect and login. Initial step")
        Component(like_service,"Like Service", "Spring Java", "Instructions for controller")
        Component(like_repository, "Like Repository","Spring Java", "CRUD operations")
        Component(like_counter, "Like Counter", "Spring Java", "Count the number of likes a GETID article has")

        Component(share_controller, "Share Controller", "Spring Java", "Handles sharing of articles.")
        Component(share_service, "Share Service", "Spring Java", "Instructions for controller")
        Component(share_repository, "Share Repository", "Spring Java", "CRUD operations")
        Component(share_counter, "Share Counter", "Spring Java", "Count the number of shares a GETID article has")

        Component(save_controller, "Save Controller", "Spring Java", "Add articles to saved list. GETALL, POST, PATCH")
        Component(save_service, "Save Service", "Spring Java", "Instructions for controller")
        Component(save_repository,"Save Repository", "Spring Java", "Handles CRUD operations for Saving articles")
    }
}

ContainerDb(db, "MongoDB Database", "MongoDB", "Stores information about articles, readers, and alerts")
ContainerDb(CloudinaryDb, "Cloudinary API", "Cloudinary", "Stores information about images and media")

Rel(web_app, share_controller, "Makes API calls to", "REST JSON/HTTPS")
Rel(share_controller, share_service, "Calls")
Rel(share_service, share_repository, "Uses")
Rel(share_service, share_counter, "Uses")
Rel(share_repository, db, "Commands")

Rel(auth_controller, auth_service_back, "Calls")
Rel(auth_controller, auth_service, "uses")
Rel(security_config,jwt_filter,"Uses")
Rel(auth_service,reset_passwrd,"Calls")

Rel(tag_controller, tag_service, "Calls")
Rel(tag_service, tag_repository, "Uses")


Rel(article_controller, article_service, "Calls")
Rel(article_service, article_repository, "Uses")
Rel(article_search,article_repository,"Calls")
Rel(article_save_later,article_service,"Calls")
Rel(article_service,article_trending, "Uses")
Rel(article_search,article_related, "Uses")
Rel(article_service, Cloudinary, "Uses")
Rel(Cloudinary, CloudinaryDb, "Commands")


Rel(author_service,author_repository,"Uses")
Rel(author_controller,author_service,"Uses")
Rel(author_profile,auth_service,"Uses")


Rel(reader_controller, comment_service, "Calls")
Rel(reader_controller, like_service, "Calls")
Rel(reader_controller, save_service, "Calls")


Rel(account_suspend,comment_moderation,"Uses")
Rel(comment_controller, comment_service, "Calls")
Rel(comment_service,comment_repository,"Uses")
Rel(comment_service,reader_repository,"Uses")
Rel(comment_service,comment_counter,"Uses")


Rel(save_controller, save_service, "Calls")
Rel(save_service,save_repository,"Uses")
Rel(save_service,reader_repository,"Uses")

Rel(like_controller, like_service, "Calls")
Rel(like_service,like_repository,"Uses")
Rel(like_service,reader_repository,"Uses")
Rel(like_service,like_counter,"Uses")


Rel(author_repository,db,"Commands")
Rel(reader_repository,db,"Commands")
Rel(article_repository,db,"Commands")
Rel(comment_repository,db,"Commands")
Rel(like_repository,db,"Commands")
Rel(save_repository,db,"Commands")

@enduml
