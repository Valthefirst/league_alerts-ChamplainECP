@startuml
actor Reader
participant Frontend as "<<UI>>\nFrontend"
participant EmailController as "<<Controller>>\nEmailController"
participant SubscriptionService as "<<Service>>\nSubscriptionService"
participant SubscriptionRepository as "<<Repository>>\nSubscriptionRepository"
participant EmailSenderService as "<<Service>>\nEmailSenderService"
participant Subscription as "<<Entity>>\nSubscription"

== Subscribing to Notifications ==
Reader -> Frontend : Enter Email & Click "Subscribe"
activate Frontend

Frontend -> EmailController : POST /api/v1/subscriptions/subscribe?email={email}&category={category}
activate EmailController

EmailController -> SubscriptionService : subscribe(email, category)
activate SubscriptionService

SubscriptionService -> SubscriptionRepository : existsByUserEmailAndCategory(email, category)
activate SubscriptionRepository
SubscriptionRepository --> SubscriptionService : Email Exists/Not Exists
deactivate SubscriptionRepository

alt Email Exists
    SubscriptionService --> EmailController : "Already Subscribed"
else Email Not Exists
    SubscriptionService -> SubscriptionRepository : save(email, category)
    activate SubscriptionRepository
    SubscriptionRepository --> SubscriptionService : Subscription Saved
    deactivate SubscriptionRepository
    SubscriptionService -> EmailSenderService : sendSimpleMail(email, "Subscription Successful", "You are now subscribed to {category} alerts!")
    activate EmailSenderService
    EmailSenderService --> SubscriptionService : Email Sent
    deactivate EmailSenderService
    SubscriptionService --> EmailController : "Subscription Successful"
end

deactivate SubscriptionService
EmailController --> Frontend : Subscription Confirmation Message

deactivate EmailController
Frontend --> Reader : Display Subscription Success/Error Message

deactivate Frontend

== Unsubscribing from Notifications ==
Reader -> Frontend : Click "Unsubscribe"
activate Frontend

Frontend -> EmailController : POST /api/v1/subscriptions/unsubscribe?email={email}&category={category}
activate EmailController

EmailController -> SubscriptionService : unsubscribe(email, category)
activate SubscriptionService

SubscriptionService -> SubscriptionRepository : existsByUserEmailAndCategory(email, category)
activate SubscriptionRepository
SubscriptionRepository --> SubscriptionService : Email Exists/Not Exists
deactivate SubscriptionRepository

alt Email Exists
    SubscriptionService -> SubscriptionRepository : delete(email, category)
    activate SubscriptionRepository
    SubscriptionRepository --> SubscriptionService : Deletion Successful
    deactivate SubscriptionRepository
    SubscriptionService --> EmailController : "Unsubscribed Successfully"
else Email Not Exists
    SubscriptionService --> EmailController : "Email Not Found"
end

deactivate SubscriptionService
EmailController --> Frontend : Unsubscribe Confirmation Message

deactivate EmailController
Frontend --> Reader : Display Unsubscribe Success/Error Message

deactivate Frontend

== Sending Notifications ==
Reader -> Frontend : Click "Send Notifications"
activate Frontend

Frontend -> EmailController : GET /api/v1/subscriptions/notify?category={category}&subject={subject}&message={message}
activate EmailController

EmailController -> SubscriptionService : getSubscribersByCategory(category)
activate SubscriptionService

SubscriptionService -> SubscriptionRepository : findByCategory(category)
activate SubscriptionRepository
SubscriptionRepository --> SubscriptionService : List<Subscription>
deactivate SubscriptionRepository

SubscriptionService --> EmailController : List<Subscribers>
deactivate SubscriptionService

loop for each subscriber
    EmailController -> EmailSenderService : sendSimpleMail(email, subject, message)
    activate EmailSenderService
    EmailSenderService --> EmailController : Email Sent
    deactivate EmailSenderService
end

EmailController --> Frontend : Notification Status

deactivate EmailController
Frontend --> Reader : Display Notification Result

deactivate Frontend
@enduml
