@startuml EmailSubscription
skinparam packageStyle rectangle

package "EmailSubscriptionSubdomain" {

    class SubscriptionController {
        - subscriptionService: SubscriptionService
        + subscribe(email: String, category: String): ResponseEntity<String>
        + unsubscribe(email: String, category: String): ResponseEntity<String>
    }

    class EmailSenderService {
        + sendMail(to: String, subject: String, body: String): void
    }

    class Subscription {
        - String userEmail
        - String category
    }

    interface SubscriptionRepository {
        + existsByUserEmailAndCategory(email: String, category: String): boolean
        + deleteByUserEmailAndCategory(email: String, category: String): void
        + findByCategory(category: String): List<Subscription>
        + findAllSubscribers(): List<Subscription>
    }

    class SubscriptionService {
        + subscribe(userEmail: String, category: String): void
        + unsubscribe(userEmail: String, category: String): void
        + isAlreadySubscribed(userEmail: String, category: String): Mono<Boolean>
        + getSubscribedCategories(userEmail: String): List<String>
        + getSubscribersByCategory(category: String): List<String>
        + notifySubscribers(category: String, subject: String, message: String): void
    }

    class SubscriptionServiceImpl {
        - emailSenderService: EmailSenderService
        - subscriptionRepository: SubscriptionRepository
        + subscribe(userEmail: String, category: String): void
        + unsubscribe(userEmail: String, category: String): void
        + isAlreadySubscribed(userEmail: String, category: String): Mono<Boolean>
        + getSubscribedCategories(userEmail: String): List<String>
        + getSubscribersByCategory(category: String): List<String>
        + notifySubscribers(category: String, subject: String, message: String): void
        + sendSubscriptionConfirmationEmail(userEmail: String, category: String): void
    }

    SubscriptionController --> SubscriptionService : uses
    SubscriptionServiceImpl --> SubscriptionRepository : interacts
    SubscriptionServiceImpl --> EmailSenderService : notifies
    SubscriptionRepository ..|> Subscription
    SubscriptionServiceImpl ..|> SubscriptionService
}
@enduml
