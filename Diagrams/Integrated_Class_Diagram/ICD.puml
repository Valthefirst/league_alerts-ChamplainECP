@startuml

title Integrated Class Diagram

package "Article Subdomain" {
    class ArticleController {
        + getArticleById(articleId: String) : ResponseEntity<ArticleResponseModel>
        + getAllArticleForASpecificSport(category: String) : ResponseEntity<List<ArticleResponseModel>>
        + createArticle(articleRequest: ArticleRequestModel) : ResponseEntity<ArticleResponseModel>
        + editArticle(articleId: String, articleRequest: ArticleRequestModel) : ResponseEntity<ArticleResponseModel>
        + deleteArticle(articleId: String) : ResponseEntity<Void>
        + searchArticles(keyword: String) : ResponseEntity<List<ArticleResponseModel>>
        + saveArticle(readerId: String, articleId: String) : ResponseEntity<Void>
        + updateArticleImage(articleId: String, image: FilePart) : ResponseEntity<String>
        + uploadImage(image: FilePart) : ResponseEntity<String>
    }

    class ArticleService {
        + getArticleById(articleId: String) : ArticleResponseModel
        + getAllArticleForASpecificSport(category: String) : List<ArticleResponseModel>
        + createArticle(articleRequest: ArticleRequestModel) : ArticleResponseModel
        + editArticle(articleId: String, articleRequest: ArticleRequestModel) : ArticleResponseModel
        + deleteArticle(articleId: String) : void
        + searchArticles(keyword: String) : List<ArticleResponseModel>
        + saveArticle(readerId: String, articleId: String) : void
        + updateArticleImage(articleId: String, image: FilePart) : String
        + uploadImage(image: FilePart) : String
    }

    class ArticleRepository {
        + findById(articleId: String) : Optional<Article>
        + findAllArticleByCategory(category: String) : List<Article>
        + save(article: Article) : Article
        + deleteById(articleId: String) : void
        + findByTitleContainingOrTags_TagNameContaining(keyword: String) : List<Article>
    }

    class Article {
        - articleId: String
        - title: String
        - content: String
        - tags: List<Tags>
        - status: ArticleStatus
        - author: Author
    }

    class ArticleRequestModel {
        - articleId: String
        - title: String
        - body: String
        - wordCount: int
        - articleStatus: ArticleStatus
        - category: String
        - tagsTag: Tags
        - timePosted: LocalDateTime
        - photoUrl: String
        - authorIdentifier: AuthorIdentifier
        - articleDescription: String
    }

    class ArticleResponseModel {
        - articleId: String
        - title: String
        - body: String
        - wordCount: int
        - articleStatus: ArticleStatus
        - category: String
        - tagsTag: Tags
        - timePosted: LocalDateTime
        - photoUrl: String
        - authorIdentifier: AuthorIdentifier
        - articleDescription: String
        - articleIdentifier: ArticleIdentifier
    }

    enum ArticleStatus {
        DRAFT
        PUBLISHED
        ARCHIVED
    }

    ArticleController --> ArticleService
    ArticleService --> ArticleRepository
    ArticleRepository --> Article
    Article --> ArticleResponseModel
    Article --> ArticleStatus
}

package "Interaction Subdomain" {
    class InteractionController {
        + likeArticle(articleId: String, userId: String) : ResponseEntity<LikeResponseModel>
        + unlikeArticle(articleId: String, userId: String) : ResponseEntity<Void>
        + addComment(articleId: String, commentRequest: CommentRequestModel) : ResponseEntity<CommentResponseModel>
        + deleteComment(commentId: String) : ResponseEntity<Void>
        + shareArticle(articleId: String, readerId: String) : ResponseEntity<ShareResponseModel>
        + getSharesByArticle(articleId: String) : ResponseEntity<List<ShareResponseModel>>
    }

    class LikeService {
        + likeArticle(articleId: String, userId: String) : LikeResponseModel
        + unlikeArticle(articleId: String, userId: String) : void
    }

    class CommentService {
        + addComment(articleId: String, commentRequest: CommentRequestModel) : CommentResponseModel
        + deleteComment(commentId: String) : void
    }

    class ShareService {
        + shareArticle(articleIdentifier: ArticleIdentifier, readerId: String) : Mono<Share>
        + getSharesByArticle(articleIdentifier: ArticleIdentifier) : Flux<Share>
    }

    class LikeRepository {
        + save(like: Like) : Like
        + findByArticleIdAndUserId(articleId: String, userId: String) : Optional<Like>
        + deleteByArticleIdAndUserId(articleId: String, userId: String) : void
    }

    class CommentRepository {
        + save(comment: Comment) : Comment
        + deleteById(commentId: String) : void
        + findById(commentId: String) : Optional<Comment>
    }

    class ShareRepository {
        + save(share: Share) : Mono<Share>
        + findByArticleIdentifier(articleIdentifier: ArticleIdentifier) : Flux<Share>
    }

    class Like {
        - likeId: String
        - userId: String
        - articleId: String
    }

    class Comment {
        - commentId: String
        - userId: String
        - articleId: String
        - text: String
        - timestamp: LocalDateTime
    }

    class Share {
        - shareId: String
        - articleId: String
        - readerId: String
        - timestamp: LocalDateTime
        - shareLink: String
    }

    class LikeResponseModel {
        - likeId: String
        - userId: String
        - articleId: String
    }

    class CommentResponseModel {
        - commentId: String
        - userId: String
        - articleId: String
        - text: String
        - timestamp: LocalDateTime
    }

    class ShareResponseModel {
        - shareId: String
        - articleId: String
        - readerId: String
        - timestamp: LocalDateTime
        - shareLink: String
    }

    InteractionController --> LikeService
    InteractionController --> CommentService
    InteractionController --> ShareService
    LikeService --> LikeRepository
    CommentService --> CommentRepository
    ShareService --> ShareRepository
    LikeRepository --> Like
    CommentRepository --> Comment
    ShareRepository --> Share
    Share --> ShareResponseModel
        LikeService --> LikeRepository
        LikeRepository --> Like
        Like --> LikeResponseModel
        Comment --> CommentResponseModel
        CommentRequestModel --> Comment

}

@enduml
